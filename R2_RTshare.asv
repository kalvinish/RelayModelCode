%% Figure 2: RT-share Manipulation and Violation Effects
% This script visualises how varying the first-stage RT-share in the relay model
% affects predicted CDFs, RSE, and Miller bound violations.

clear; clc; close all;

% Add custom function directory to path
addpath(fullfile(pwd, 'Functions'));

writedata = false;

%% Load Empirical Data and Fitted Parameters from Previous Analysis
% Parameters stored as a cell array: {A_dist, V_dist, weightStruct}
paramsFile = fullfile(pwd, 'FittedParameters', 'params_uni_miller_82.mat');
load(paramsFile);

% Extract parameters for convenience
aMU      = params_82(1,1);
vMU      = params_82(2,1);
avMU     = params_82(3,1);

aLAMBDA  = params_82(1,2);
vLAMBDA  = params_82(2,2);
avLAMBDA = params_82(3,2);

% Load in empirical data from digitised CDF taken from Figure 1 Miller (1982)
empData_82 = readmatrix(fullfile(pwd, 'EmpiricalData', 'Miller82', 'miller_82.xlsx'));

%% Get empirical RSE and RMI violations from IG distribution

xx = linspace(100, 700, 100);  % RT values for CDF evaluation

a_cdf  = getUniCDF(xx, aMU, aLAMBDA);
v_cdf  = getUniCDF(xx, vMU, vLAMBDA);
av_cdf = getUniCDF(xx, avMU, avLAMBDA);

grice_cdf = getGriceCDF(xx, aMU, vMU, aLAMBDA, vLAMBDA); % calculate Grice's Bound
raab_cdf = getRaabCDF(xx, aMU, vMU, aLAMBDA, vLAMBDA); % calculate Raab's Race Model
miller_cdf = getMillerCDF(xx, aMU, vMU, aLAMBDA, vLAMBDA); % calculate RMI

emp.rse = getRSE_fromCDF(xx, av_cdf, grice_cdf);
emp.violation = getViolation_fromCDF(xx, av_cdf, miller_cdf);

%% Fit the RT share parameter to the empirical data

[opt_w, rmse.rtshare] = getRTshare(empData_82(:,[3,4]), aMU, vMU, aLAMBDA, vLAMBDA);

%% Data for Figure 1 b,c,d

numWeights = 100;                  % Number of weight steps
weights    = linspace(0, 0.5, numWeights);

modelCDFs = nan(length(xx), numWeights);
rse       = nan(1, numWeights);
violation = nan(1, numWeights);

% Parallel loop speeds up independent CDF evaluations
parfor idx = 1:numWeights

    w = weights(idx);
    modelCDFs(:,idx) = getRelayCDF(xx, aMU, vMU, aLAMBDA, vLAMBDA, w, 1-w, w, 1-w);

    % Redundancy gain (RSE) and violation metric
    rse(idx)       = getRSE_fromCDF(xx, modelCDFs(:,idx), grice_cdf);
    violation(idx) = getViolation_fromCDF(xx, modelCDFs(:,idx), miller_cdf);

end

pred.rse = rse; clear rse;
pred.violation = violation; clear violation;

%% Plotting: CDF Evolution with Weight

plotOpts = createPlotOpts([100 700], 3, [0 1], 3);

figure;
t = tiledlayout(1, 4, 'TileSpacing','compact', 'Padding','compact');
ax1 = nexttile(t, [1 2]); hold(ax1,'on');

% Unisensory CDFs
plot(xx, a_cdf, 'Color',plotOpts.audCol, 'LineWidth',plotOpts.linewidth);
plot(xx, v_cdf, 'Color',plotOpts.visCol, 'LineWidth',plotOpts.linewidth);

% Relay model curves colored by weight
grey = [228 210 231]/255; black = [137 41 133]/255;
colors = [linspace(grey(1),black(1),numWeights)',...
          linspace(grey(2),black(2),numWeights)',...
          linspace(grey(3),black(3),numWeights)'];

for idx = 1:numWeights
    plot(ax1, xx, modelCDFs(:,idx), 'Color', colors(idx,:), 'LineWidth',plotOpts.linewidth);
end

% Reference bounds: Miller and Raab
plot(ax1, xx, miller_cdf, '-', 'LineWidth',plotOpts.linewidth, 'Color', plotOpts.modelCol);
plot(ax1, xx, raab_cdf, '--', 'LineWidth',plotOpts.linewidth, 'Color', plotOpts.modelCol);

% Optimal-weight relay curve
fittedRelayCDF = getRelayCDF(xx,aMU,vMU,aLAMBDA,vLAMBDA,opt_w,1-opt_w,opt_w,1-opt_w);
plot(ax1, xx, fittedRelayCDF, 'Color', plotOpts.audvisCol, 'LineWidth',plotOpts.linewidth);

markerOpts = {'Marker', 'o', 'MarkerSize', plotOpts.markersize, 'LineStyle', 'none', 'MarkerFaceColor', plotOpts.markerfacecol, 'LineWidth', plotOpts.markerlinewidth};

plot(ax1, empData_82(:,1), empData_82(:,4), markerOpts{:}, 'Color', plotOpts.audCol, 'DisplayName', 'A');
plot(ax1, empData_82(:,2), empData_82(:,4), markerOpts{:}, 'Color', plotOpts.visCol, 'DisplayName', 'V');
plot(ax1, empData_82(:,3), empData_82(:,4), markerOpts{:}, 'Color', plotOpts.audvisCol, 'DisplayName', 'AV');

xlabel('Response Time (ms)'); 
ylabel('Cumulative Probability');
box off;
ax1.TickDir = plotOpts.tickdir; 
ax1.FontSize = plotOpts.fontsize;

% Set axis ticks and other properties
ylim(plotOpts.ylim)
xlim(plotOpts.xlim)
yticks(plotOpts.yticks)
xticks(plotOpts.xticks)

ax1.YColor = plotOpts.axisCol;
ax1.XColor = plotOpts.axisCol;
ax1.LineWidth = plotOpts.linewidth;

%% Plot RSE and Violation as Function of Weight
% RSE subplot
ax2 = nexttile(t); hold(ax2,'on');
plot(weights*100, pred.rse, 'k-', 'LineWidth', plotOpts.linewidth);
ylabel('RSE (ms)');
xlabel('RT Share (%)');
raabRSE = getRSE_fromCDF(xx,raab_cdf, grice_cdf);
plot([0 weights(end)*100], raabRSE*[1 1], '--', 'LineWidth', plotOpts.linewidth, 'Color', plotOpts.modelCol);
axis([0 50 0 80]); box off; ax2.TickDir=plotOpts.tickdir; ax2.FontSize=plotOpts.fontsize;
yticks(linspace(0, 80, 5))
xticks(linspace(0, 50, 6))
ax2.YColor = "k";
ax2.XColor = "k";
ax2.LineWidth = linewidth;


% Violation subplot
ax3 = nexttile(t); hold(ax3,'on');
plot(weights*100, violationsTrue, 'k-', 'LineWidth',linewidth);
ylabel('Violations (ms)'); xlabel('RT Share (%)');
plot([0 50],[0 0],'r--','LineWidth',linewidth);
axis([0 50 0 10]); box off; ax3.TickDir='out'; ax3.FontSize=fontsize;
yticks(linspace(0, 10, 6))
xticks(linspace(0, 50, 6))
ax3.YColor = "k";
ax3.XColor = "k";
ax3.LineWidth = linewidth;