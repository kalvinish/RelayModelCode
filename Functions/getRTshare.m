function [optimal_w, fval] = getRTshare(data, aMU, vMU, aLAMBDA, vLAMBDA)
    % This function finds the optimal weight 'RT-share' that minimises the RMSE
    % between the empirical CDF of 'data' and the predicted CDF generated by
    % 'multiCDF' using the given parameters.
    %
    % Inputs:
    %   data      - N x 2 array where data(:,1) are the x values (raw observations)
    %               and data(:,2) are the empirical CDF values.
    %   aMU, vMU, aLAMBDA, vLAMBDA - Parameters for the multiCDF function.
    %
    % Outputs:
    %   optimal_w   - Optimized weight 'w'.
    %   fval        - Objective function value at the optimal weight.
    
    % Extract the data: raw observations and empirical CDF
    empirical_F = data(:,2);
    xx = data(:,1);

    % Remove duplicate x-values (ensures unique, sorted evaluation points)
    [xx, idx] = unique(xx);
    empirical_F = empirical_F(idx);

    % Define the objective function to minimize (e.g., normalized RMSE between CDFs)
    obj_fun = @(w) compute_distance(w);

    % Define the bounds for the weight
    lb = 0;
    ub = 0.5;

    % Optimize using fminbnd
    options = optimset('Display', 'iter', 'TolFun', 1e-10, 'TolX', 1e-10);
    [optimal_w, fval] = fminbnd(obj_fun, lb, ub, options);

    function dist = compute_distance(w)
        % Compute predicted CDF using multiCDF
        predicted_F = getRelayCDF(xx, aMU, vMU, aLAMBDA, vLAMBDA, w, 1 - w, w, 1 - w);
    
        % Compute residuals
        residuals = empirical_F - predicted_F;
        
        % Compute root mean square error (RMSE)
        dist = sqrt(mean(residuals.^2));
    end

end